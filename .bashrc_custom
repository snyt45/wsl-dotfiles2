#*******************************************************************************
#
# .bashrc_custom
#   .bash_profileから読み込むカスタム設定ファイル
#
#*******************************************************************************

# ----------------------------------------------------------------------------
# starshilp
# ----------------------------------------------------------------------------
if command -v starship &> /dev/null; then
  eval "$(starship init bash)";
fi;

# ----------------------------------------------------------------------------
# zoxide
# ----------------------------------------------------------------------------
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init bash)"
fi;

# ----------------------------------------------------------------------------
# Volta
# ----------------------------------------------------------------------------
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# ----------------------------------------------------------------------------
# rbenv
# ----------------------------------------------------------------------------
if command -v rbenv &> /dev/null; then
  eval "$(rbenv init -)";
fi;

# ----------------------------------------------------------------------------
# FZF
# ----------------------------------------------------------------------------

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
HISTCONTROL=erasedups # 重複したコマンドは保存しない

# コマンド履歴検索
_replace_by_history() {
  local l
  l=$(HISTTIMEFORMAT='' history | sort -k1,1nr | sed -e 's/^[[:space:]]*[0-9]\+[[:space:]]*//' | fzf --query "$READLINE_LINE")
  READLINE_LINE="$l"
  READLINE_POINT=${#l}
}
bind -x '"\C-r": _replace_by_history'

_open_file_vim() {
  files=$(find . -path '*/\.*' -type d -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//) &&
  selected_files=$(echo "$files" | \
                   fzf --prompt 'all files> ' \
                       --preview="bat --color=always {1} --highlight-line {2}" \
                       --preview-window 'down,60%,+{2}+3/3') &&
  vim $selected_files
}

_open_git_file_vim() {
  files=$(git ls-files) &&
  selected_files=$(echo "$files" | \
                   fzf --prompt 'git files> ' \
                       --preview="bat --color=always {1} --highlight-line {2}" \
                       --preview-window 'down,60%,+{2}+3/3') &&
  vim $selected_files
}

# git管理されていれば_open_git_file_vim、そうでなければ_open_file_vimを実行する
_fzf_omni_files() {
	if [ -n "$(git status 2> /dev/null)" ]; then
    _open_git_file_vim
  else
    _open_file_vim
	fi
}
bind -x '"\C-p": _fzf_omni_files'

# 全文検索してVimで開く
_fzf_ripgrep() {
  RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
  INITIAL_QUERY="${*:-}"
  IFS=: read -ra selected < <(
    FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
    fzf --ansi \
        --disabled --query "$INITIAL_QUERY" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --delimiter : \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'down,60%,+{2}+3/3'
  )
  [ -n "${selected[0]}" ] && vim "${selected[0]}" "+${selected[1]}"
}
bind -x '"\C-f": _fzf_ripgrep'

# 選択したブランチに移動(remote含む)
gbc() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# コミットログを検索して表示
gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# インタラクティブにgit addする
gadd() {
  local selected
  selected=$(\git status -s | fzf -m --ansi --preview="echo {} | awk '{print \$2}' | xargs \git diff --color origin/master" | awk '{print $2}')
  if [[ -n "$selected" ]]; then
    git add `paste -s - <<< $selected`
  fi
  git status
}

# 選択したコンテナにログイン
da() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker exec -it "$cid" /bin/bash
}

# 選択したコンテナのログ取得
dl() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker logs -f --tail=200 "$cid"
}

# 選択したコンテナを再起動
dr() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -m -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && echo $cid | xargs docker restart
}

# 選択したコンテナを削除
drmc() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -m -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && echo $cid | xargs docker rm -f
}

# 選択したイメージを削除
drmi(){
  selection=$(docker images | fzf | awk '{print $3}')
  [ -n "$selection" ] && docker rmi $selection
}

# 選択したボリュームを削除
drmv(){
  selection=$(docker volume ls | fzf | awk '{print $3}')
  [ -n "$selection" ] && docker volume rm $selection
}

# ----------------------------------------------------------------------------
# Util
# ----------------------------------------------------------------------------

# コマンドプロンプトのstartコマンドを実行
# ref: https://www.iplab.cs.tsukuba.ac.jp/~takakura/blog/20200715/
open() {
  cmd.exe /c start $1
}

# ----------------------------------------------------------------------------
# alias
# ----------------------------------------------------------------------------

alias g="git"

" ----------------------------------------------------------------------------
" KEY MAPS
" ----------------------------------------------------------------------------

let mapleader = "\<Space>"

" 行頭、行末の移動
nnoremap H ^
nnoremap L $

" 段落の移動
nnoremap <C-j> 10j
nnoremap <C-k> 10k

" highlight off
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR><Esc>

" These are things that I mistype and want ignored.
noremap q <silent>

" accelerated-jk shortcut
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

" netrw shorcut
nnoremap <silent> <leader>e :Ex<CR>
augroup vimrc_netrw
  autocmd!
  " h key is  up
  autocmd FileType netrw nmap <buffer> h -
  " l key is  Open file, change directory
	autocmd FileType netrw nmap <buffer> l <CR>
augroup END

" fzf.vim shortcut
" git管理されていれば:GFiles、そうでなければ:Filesを実行する
function! FzfOmniFiles()
  if v:shell_error
    :Files
  else
		let is_git_root = system('git rev-parse --show-toplevel')
    let current_dir = system('pwd')
		" Gitリポジトリでルート以外にいるときはカレントディレクトリ配下を絞り込む
		if current_dir == is_git_root
			:GFiles
		else
      :Files
		endif
  endif
endfunction
nnoremap <silent> <leader>r :History:<CR>
nnoremap <silent> <leader>p :call FzfOmniFiles()<CR>
nnoremap <silent> <leader>g :GFiles?<CR>
nnoremap <silent> <leader>f :Rg<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>l :BLines<CR>
nnoremap <silent> <leader>h :History<CR>

" vim-fugitive shortcut
nnoremap <silent> gs :Git<CR>
nnoremap <silent> ga :Git add -A<CR>
nnoremap <silent> gc :Git commit<CR>
nnoremap <silent> gb :Git blame<CR>
nnoremap <silent> gd :Git diff<CR>
nnoremap <silent> gl :Git log<CR>
nnoremap <silent> gps :Git push<CR>
nnoremap <silent> gpl :Git pull<CR>

" asyncomplete.vim shortcut
inoremap <expr> <C-j>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" ----------------------------------------------------------------------------
" SETTINGS
" ----------------------------------------------------------------------------

" Search Text highlight
set hlsearch

set encoding=utf-8
set number
set laststatus=2
set virtualedit=block
set wildmenu
set noswapfile
set nobackup
set noundofile
set tabstop=2
set smartindent
set shiftwidth=2

" https://qiita.com/Linda_pp/items/9e0c94eb82b18071db34
if has('vim_starting')
    " 挿入モード時に非点滅の縦棒タイプのカーソル
    let &t_SI .= "\e[6 q"
    " ノーマルモード時に非点滅のブロックタイプのカーソル
    let &t_EI .= "\e[2 q"
    " 置換モード時に非点滅の下線タイプのカーソル
    let &t_SR .= "\e[4 q"
endif

" Clipboard
augroup Yank
  au!
  autocmd TextYankPost * :call system('clip.exe', @")
augroup END

" ----------------------------------------------------------------------------
" PLUGINS
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'itchyny/lightline.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npm install'  }
Plug 'morhetz/gruvbox'
Plug 'rhysd/accelerated-jk'
Plug 'vim-jp/vimdoc-ja'

call plug#end()

" ----------------------------------------------------------------------------
" PLUGIN SETTINGS
" ----------------------------------------------------------------------------

set background=dark
colorscheme gruvbox

" vimdoc-ja
set helplang=ja,en

" vim-gitgutter
" Always show sign column
set signcolumn=yes

" By default updatetime is 4000 ms
set updatetime=100

" Use fontawesome icons as signs
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" Default key mapping off
" let g:gitgutter_map_keys = 0

" Execute after loading the color schema
" https://teratail.com/questions/29844#reply-46767
augroup vimrc_vim_gitgutter
  autocmd!
  " sign column bg color
  autocmd VimEnter,ColorScheme * highlight SignColumn guibg=NONE ctermbg=NONE

  " sign column color
  autocmd VimEnter,ColorScheme * highlight GitGutterAdd guibg=NONE ctermbg=NONE guifg=#000900 ctermfg=2
  autocmd VimEnter,ColorScheme * highlight GitGutterChange guibg=NONE ctermbg=NONE guifg=#bbbb00 ctermfg=3
  autocmd VimEnter,ColorScheme * highlight GitGutterDelete guibg=NONE ctermbg=NONE guifg=#ff2222 ctermfg=1
augroup END

" netrw
" 表示形式をTreeViewに変更
let g:netrw_liststyle=3
" ヘッダを非表示にする
let g:netrw_banner=0
" サイズを(K,M,G)で表示する
" let g:netrw_sizestyle="H"
" 日付フォーマットを yyyy/mm/dd(曜日) hh:mm:ss で表示する
" let g:netrw_timefmt="%Y/%m/%d(%a) %H:%M:%S"
" プレビューウィンドウを垂直分割で表示する
let g:netrw_preview=1
" ディレクトリを移動する度にカレントディレクトリを設定
let g:netrw_keepdir=0

" fzf.vim
let g:fzf_preview_window = ['down:60%', 'ctrl-/']
